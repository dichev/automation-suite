# my global config
global:
  scrape_interval:     20s # Set the scrape interval to every 15
seconds. Default is every 1 minute.
  evaluation_interval: 20s # Evaluate rules every 15 seconds. The
default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093

# Load rules once and periodically evaluate them according to the
global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any
timeseries scraped from this config.
  - job_name: 'prometheus'

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
    - targets: ['prometheus:9090']

  - job_name: 'node'
    static_configs:
      {{#each node}}
      - targets: ['{{ip}}:9100']
        labels:
          alias: {{name}}

      {{/each}}
      


  - job_name: 'mysql'
    scrape_interval: 1m
    scrape_timeout: 30s
    static_configs:
      {{#each mysql}}
      - targets: ['{{ip}}:9104']
        labels:
          alias: {{name}}

      {{/each}}

      
  - job_name: 'cadvisor'
    dns_sd_configs:
    - names:
      - 'tasks.cadvisor'
      type: 'A'
      port: 8080

  - job_name: 'grafana'
    scheme: https
    tls_config:
      insecure_skip_verify: true
    dns_sd_configs:
    - names:
      - 'tasks.grafana'
      type: 'A'
      port: 3000

  - job_name: 'docker_node'
    dns_sd_configs:
    - names:
      - 'tasks.node-exporter'
      type: 'A'
      port: 9100

  - job_name: 'metrics'
    scrape_interval: 1m
    static_configs:

      - targets: ['192.168.100.130:9237']
        labels:
          alias: data-warehouse

    metric_relabel_configs:
      - regex: 'user'
        action: labeldrop
      - regex: 'driver'
        action: labeldrop
      - regex: 'host'
        action: labeldrop
      - regex: 'instance'
        action: labeldrop
      - regex: 'sql_job'
        action: labeldrop
      - regex: 'database'
        action: labeldrop
